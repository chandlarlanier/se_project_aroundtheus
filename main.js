!function(){"use strict";var e={d:function(t,s){for(var r in s)e.o(s,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:s[r]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{hi:function(){return u},KQ:function(){return l}});class t{constructor(e,t){let{data:s,handleImageClick:r,handleDelete:i,confirmPopup:n,api:o}=e;this._name=s.name,this._link=s.link,this._id=s._id,this._isLiked=s.isLiked,this._handleImageClick=r,this._handleDelete=i,this._confirmPopup=n,this._api=o,this._cardSelector=t}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getId(){return this._id}removeCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active"),this._cardElement.querySelector(".card__like-button_active")?this._api.likeCard(this.getId()).catch((e=>{console.error(e)})):this._api.unlikeCard(this.getId()).catch((e=>{console.error(e)}))}_setLike(){this._isLiked&&this._likeButton.classList.add("card__like-button_active")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon())),this._binIcon.addEventListener("click",(()=>{this._handleDelete(this,this.getId())})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name})}))}generateCard(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._binIcon=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardDescription=this._cardElement.querySelector(".card__description"),this._setEventListeners(),this._setLike(),this._cardImage.src=this._link,this._cardImage.alt=`Photo of ${this._name}`,this._cardDescription.textContent=this._name,this._cardElement}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){"Escape"==e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("mousedown",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("popup")&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".popup__form"),this._submitButton=this._popupElement.querySelector(".popup__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=t,this._inputList=[...this._popupForm.querySelectorAll(".popup__input")]}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}close(){super.close(),this._popupForm.reset()}_getInputValues(){const e={};for(const t of this._inputList)e[t.name]=t.value;return e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this._handleFormSubmit(this._getInputValues()).then((()=>{this.close()})).finally((()=>{this.renderLoading(!1)}))}))}}class i{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector(".popup__input_type_name"),document.querySelector(".popup__input_type_description");const n=document.forms["popup__form_type_edit-profile"],o=document.forms["popup__form_type_add-card"],a=document.forms["popup__form_type_edit-avatar"];function l(e){console.error(e)}const u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_request(e,t){return fetch(e,t).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}addCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})})}unlikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}updateProfileInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9ef0145a-4550-4d8d-9dc2-252c6d573e29","content-type":"application/json"}}),_=new class extends s{constructor(e){let{popupSelector:t}=e;super(t),this._confirmButton=this._popupElement.querySelector(".popup__button")}setSubmitAction(e){this._submitAction=e}open(e,t){super.open(),this._card=e,this._cardId=t}setEventListeners(){super.setEventListeners(),this.setSubmitAction((()=>{u.deleteCard(this._cardId).then((()=>{this._card.removeCard(),this.close()})).catch(l)})),this._confirmButton.addEventListener("click",this._submitAction)}}({popupSelector:".popup_type_delete-card"}),c=e=>{const s=new t({data:e,handleImageClick:e=>{d.open(e)},handleDelete:(e,t)=>{_.open(e,t)},confirmPopup:_,api:u},".card-template");h.addItem(s.generateCard())},d=new class extends s{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".popup__image"),this._imageCaption=this._popupElement.querySelector(".popup__heading_type_preview-image")}open(e){this._imageCaption.textContent=e.name,this._imageElement.src=e.link,this._imageElement.alt=`Photo of ${e.name}`,super.open()}}(".popup_type_preview-image"),h=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._element=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._element.prepend(e)}}({renderer:c},".cards__list");Promise.all([u.getUserInfo(),u.getInitialCards()]).then((e=>{let[t,s]=e;p.setUserInfo(t),h.renderItems(s.reverse())})).catch(l);const p=new class{constructor(e){let{nameSelector:t,aboutMeSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._aboutMeElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutMeElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._nameElement.textContent=t,this._aboutMeElement.textContent=s,this._avatarElement.src=r}}({nameSelector:".profile__title",aboutMeSelector:".profile__description",avatarSelector:".profile__image"}),m=new r(".popup_type_edit-profile",(e=>u.updateProfileInfo(e).then((()=>{p.setUserInfo(e)})).catch(l))),E=new r(".popup_type_add-card",(e=>u.addCard(e).then((e=>{c(e)})).catch(l))),b=new r(".popup_type_edit-avatar",(e=>u.updateAvatar(e).then((e=>{p.setUserInfo(e)})).catch(l))),v={};var f;f={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},Array.from(document.querySelectorAll(f.formSelector)).forEach((e=>{const t=new i(f,e),s=e.getAttribute("name");v[s]=t,t.enableValidation()})),d.setEventListeners(),m.setEventListeners(),b.setEventListeners(),E.setEventListeners(),_.setEventListeners(),document.querySelector(".profile__edit-button").addEventListener("mousedown",(()=>{m.setInputValues(p.getUserInfo()),v[n.getAttribute("name")].disableButton(),m.open()})),document.querySelector(".profile__add-button").addEventListener("mousedown",(()=>{v[o.getAttribute("name")].disableButton(),E.open()})),document.querySelector(".profile__edit-image").addEventListener("mousedown",(()=>{v[a.getAttribute("name")].disableButton(),b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,